@testset "app" begin

@testset "exit" begin
	app = MiniApp()
	put!(app.fromGUI, :exit=>[])
	process_thread(app.jg, app.fromGUI, app.toGUI)
	didExit = false
	while true
		@test isready(app.toGUI)
		msg = take!(app.toGUI)
		msg.first == :exited && (didExit=true; break)
	end
	@test didExit
end

@testset "exit2" begin
	app = MiniApp()
	init(app)
	lastSchedulerTime = Ref{UInt64}(0)
	put!(app.fromGUI, :exit=>[])
	@test !runall(app)
end

@testset "data.tsv" begin
	filepath = joinpath(@__DIR__, "data/data.tsv")

	varIds = [Symbol("V$i") for i=1:40]
	sampleIds = [string('S',lpad(i,2,'0')) for i=1:20]
	groupAnnot = repeat(["A","B"],inner=10)
	timeAnnot = vcat(0.01:0.01:0.1, 0.01:0.01:0.1)

	app = MiniApp()
	init(app)

	# Open file
	setvalue(app, Any["samplefilepath", filepath])
	setvalue(app, Any["lastsampleannot", "Time"])
	put!(app.fromGUI, :loadsample=>[])
	@test runall(app)
	dfSample = app.jg.scheduler.jobs[app.jg.loadSampleID].result
	@test names(dfSample) == vcat([:SampleId, :Group, :Time], varIds)
	@test dfSample.SampleId == sampleIds
	@test dfSample.Group == groupAnnot
	@test dfSample.Time == timeAnnot
	@test size(dfSample)==(20,3+40)

	X = Matrix(convert(Matrix{Float64}, dfSample[:,4:end])')
	normalizemean!(X)

	# PMA (groups)
	setvalue(app, Any["samplesimplexmethod", "SA"])
	setvalue(app, Any["sampleannot", "Group"])
	put!(app.fromGUI, :dimreduction=>[])
	@test runall(app)
	reduced = app.jg.scheduler.jobs[app.jg.dimreductionID].result
	@test reduced.sa == dfSample[!,1:3]
	@test reduced.va[!,1] == varIds
	factorizationcmp(pma(X, groupsimplices(groupAnnot); nsv=10), reduced.F)

	# PMA (time series)
	setvalue(app, Any["samplesimplexmethod", "Time"])
	setvalue(app, Any["sampleannot", "Group"])
	setvalue(app, Any["timeannot", "Time"])
	put!(app.fromGUI, :dimreduction=>[])
	@test runall(app)
	reduced = app.jg.scheduler.jobs[app.jg.dimreductionID].result
	@test reduced.sa == dfSample[!,1:3]
	@test reduced.va[!,1] == varIds
	#factorizationcmp(pma(X, timeseriessimplices(timeAnnot, groupby=groupAnnot); nsv=10), reduced.F)
	G = timeseriessimplices(timeAnnot, groupby=groupAnnot)
	factorizationcmp(pma(X, G; nsv=10), reduced.F)

	# PMA (NN)
	setvalue(app, Any["samplesimplexmethod", "NN"])
	setvalue(app, Any["knearestneighbors", "2"])
	setvalue(app, Any["distnearestneighbors", "0.5"])
	put!(app.fromGUI, :dimreduction=>[])
	@test runall(app)
	reduced = app.jg.scheduler.jobs[app.jg.dimreductionID].result
	@test reduced.sa == dfSample[!,1:3]
	@test reduced.va[!,1] == varIds
	factorizationcmp(pma(X, neighborsimplices(X,k=2,r=0.5,dim=50), nsv=10), reduced.F)

	# PMA (NN withing groups)
	setvalue(app, Any["samplesimplexmethod", "NNSA"])
	setvalue(app, Any["sampleannot", "Group"])
	setvalue(app, Any["knearestneighbors", "2"])
	setvalue(app, Any["distnearestneighbors", "0.5"])
	put!(app.fromGUI, :dimreduction=>[])
	@test runall(app)
	reduced = app.jg.scheduler.jobs[app.jg.dimreductionID].result
	@test reduced.sa == dfSample[!,1:3]
	@test reduced.va[!,1] == varIds
	F = pma(X, neighborsimplices(X,k=2,r=0.5,dim=50,groupby=groupAnnot), nsv=10)
	factorizationcmp(F, reduced.F)

	# Exports
	mktempdir() do temppath
		for (dim,order,mode) in zip((1,3,7,10), ("Abs","Descending","Ascending","Original"), ("Samples","Variables","Samples","Variables"))
			setvalue(app, Any["exportsingledim", "$dim"])
			setvalue(app, Any["exportsinglesort", order])
			setvalue(app, Any["exportmode", mode])
			filepath = joinpath(temppath,"PMA$(dim)_$(mode)_$order.tsv")
			setvalue(app, Any["exportsinglepath", filepath])
			put!(app.fromGUI, :exportsingle=>[])
			@test runall(app)
			result = DataFrame(CSV.File(filepath, delim='\t', use_mmap=false, threaded=false))
			colName = Symbol(:PMA,dim)
			resultPMA = result[:,colName]

			if mode=="Samples"
				idCol = :SampleId
				ids = sampleIds
				PMA = reduced.F.V[:,dim]
			else
				idCol = :VariableId
				ids = string.(varIds)
				PMA = reduced.F.U[:,dim]
			end

			perm = collect(1:length(PMA))
			if order=="Abs"
				perm = sortperm(PMA, by=abs, rev=true)
			elseif order=="Descending"
				perm = sortperm(PMA, rev=true)
			elseif order=="Ascending"
				perm = sortperm(PMA)
			end

			@test names(result)==[idCol,colName]
			@test result[!,idCol] == ids[perm]
			@test resultPMA ≈ PMA[perm]
		end


		for (dim,mode) in zip((4,5), ("Samples","Variables"))
			setvalue(app, Any["exportmultipledim", "$dim"])
			setvalue(app, Any["exportmode", mode])
			filepath = joinpath(temppath,"PMA$(dim)_$(mode).csv")
			setvalue(app, Any["exportmultiplepath", filepath])
			put!(app.fromGUI, :exportmultiple=>[])
			@test runall(app)
			result = DataFrame(CSV.File(filepath, delim=',', use_mmap=false, threaded=false))

			colNames = Symbol.(:PMA,1:dim)

			if mode=="Samples"
				@test names(result)==vcat(:SampleId, colNames)
				@test result.SampleId == sampleIds
				@test convert(Matrix,result[:,colNames]) ≈ reduced.F.V[:,1:dim]
			else
				@test names(result)==vcat(:VariableId, colNames)
				@test result.VariableId == string.(varIds)
				@test convert(Matrix,result[:,colNames]) ≈ reduced.F.U[:,1:dim]
			end
		end
	end

	# Exit
	put!(app.fromGUI, :exit=>[])
	@test !runall(app)
end


@testset "MissingValueReconstruction" begin
	reconstructed = Float64[0.06 0.26 0.0 0.0 0.28 0.03 0.04 0.12 0.05 0.0 0.02 0.31 0.0 0.85 0.41 0.06 0.04 0.92 0.32 0.12; 0.01 0.13 0.48 0.64 0.23 0.01 0.0 0.18 0.03 0.14 0.26 0.0 0.09 0.27 0.1 0.0 0.48 0.06 0.07 0.56; 0.0 0.22 0.02 0.0 0.02 0.06 0.05 0.59 0.64 0.81 0.98 0.24 0.08 0.24 0.41 0.0 0.65 0.15 0.11 0.0; 0.01 0.01 0.31 0.23 0.02 0.0 0.01 0.15 0.03 0.64 0.21 0.16 0.0 0.02 0.12 0.84 0.06 0.0 0.0 0.2; 0.03 0.55 0.0 0.06 0.01 0.01 0.16 0.01 0.42 0.73 0.01 0.15 0.27 0.02 0.02 0.37 0.16 0.19 0.04 0.0; 0.36 0.97 0.54 0.98 0.03 0.52 0.1 0.06 0.14 0.0 0.46 0.38 0.29 0.93 0.06 0.07 0.05 0.45 0.0 0.01; 0.12 0.97 0.3 0.07 0.11 0.28 0.31 0.07 0.0 0.16 0.0 0.29 0.33 0.01 0.01 0.02 0.17 0.0 0.67 0.45; 0.0 0.08 0.49 0.34 0.07 0.01 0.03 0.1 0.05 0.16 0.05 0.36 0.0 0.38 0.41 0.0 0.09 0.67 0.61 1.0; 0.01 0.3 0.19 0.0 0.0 0.0 0.32 0.72 0.0 0.04 0.7 1.0 0.55 0.12 0.03 0.19 0.52 0.04 0.04 0.8; 0.12 0.0 0.04 0.02 0.19 0.09 0.01 0.66 0.25 0.21 0.01 0.02 0.38 0.62 0.3 0.99 0.38 0.1 0.54 0.07; 0.08 0.0 0.16 0.01 0.69 0.23 0.81 0.29 0.13 0.4 0.04 0.15 0.17 0.64 0.03 0.32 0.78 0.28 0.12 0.36; 0.89 0.02 0.0 0.02 0.26 0.06 0.01 0.01 0.48 0.58 0.25 0.29 0.51 0.31 0.22 0.0 0.27 0.01 0.04 0.05; 0.55 0.04 0.47 0.0 0.24 0.07 0.64 0.01 0.02 0.0 0.42 0.0 0.36 0.22 0.06 0.95 0.66 0.27 0.09 0.05; 0.46 0.19 0.1 0.01 0.13 0.15 0.06 0.84 0.02 0.0 0.09 0.62 0.01 0.0 0.01 0.0 0.01 0.33 0.47 0.58; 0.04 0.28 0.27 0.69 0.0 0.78 0.12 0.01 0.13 0.0 0.0 0.09 0.11 0.53 0.0 0.29 0.39 0.67 0.42 0.29; 0.01 0.09 0.0 0.49 0.18 0.0 0.64 0.67 0.32 0.37 0.08 0.0 0.04 0.17 0.0 0.06 0.01 0.0 0.43 0.22; 0.27 0.02 0.05 0.88 0.02 0.16 0.09 0.0 0.46 0.05 0.18 0.11 0.02 0.37 0.88 0.47 0.92 0.41 0.96 0.0; 0.0 0.99 0.98 0.31 0.05 0.02 0.06 0.03 0.34 0.37 0.17 0.0 0.33 0.78 0.47 0.75 0.34 0.04 0.69 0.0; 0.69 0.34 0.15 0.12 0.11 0.0 0.91 0.35 0.05 0.0 0.26 0.01 0.62 0.82 0.48 0.4 0.08 0.0 0.32 0.0; 0.08 0.01 0.85 0.82 0.0 0.0 0.99 0.0 0.12 0.05 0.04 0.53 0.0 0.89 0.26 0.01 0.17 0.39 0.05 0.0; 0.01 0.01 0.72 0.2647368421052631 0.0 0.6 0.01 0.08 0.18 0.42 0.48 0.02 0.34 0.59 0.02 0.6 0.02 0.76 0.03 0.14; 0.17555555555555552 0.13 0.47 0.01 0.08 0.26 0.25 0.17555555555555552 0.0 0.0 0.01 0.82 0.0 0.0 0.03 0.0 0.0 0.3 0.07 0.73; 0.0 0.3664705882352941 0.39 0.99 0.03 0.5 0.88 0.13 0.8 0.0 0.0 0.0 0.3664705882352941 0.3664705882352941 0.43 0.7 0.72 0.22 0.04 0.4; 0.0 0.5 0.5 0.97 0.02 0.08 0.35 0.238125 0.02 0.26 0.02 0.238125 0.1 0.0 0.0 0.92 0.0 0.238125 0.238125 0.07; 0.09 0.0 0.09733333333333334 0.09733333333333334 0.56 0.0 0.09733333333333334 0.09733333333333334 0.0 0.14 0.01 0.0 0.02 0.08 0.12 0.0 0.09733333333333334 0.09 0.1 0.25; 0.34500000000000003 0.34500000000000003 0.13 0.63 0.34500000000000003 0.03 0.0 0.06 0.56 0.55 0.15 0.34500000000000003 0.87 0.9 0.79 0.04 0.34500000000000003 0.34500000000000003 0.09 0.03; 0.85 0.79 0.32769230769230767 0.32769230769230767 0.35 0.32769230769230767 0.32769230769230767 0.21 0.03 0.01 0.36 0.44 0.52 0.01 0.32769230769230767 0.66 0.32769230769230767 0.03 0.0 0.32769230769230767; 0.86 0.24499999999999997 0.24499999999999997 0.24 0.01 0.24499999999999997 0.84 0.24499999999999997 0.24499999999999997 0.15 0.24499999999999997 0.24499999999999997 0.24499999999999997 0.1 0.13 0.3 0.03 0.04 0.24 0.0; 0.3427272727272727 0.92 0.3427272727272727 0.3427272727272727 0.09 0.3427272727272727 0.9 0.0 0.3427272727272727 0.3427272727272727 0.02 0.3427272727272727 0.63 0.05 0.19 0.09 0.0 0.88 0.3427272727272727 0.3427272727272727; 0.6 0.271 0.271 0.271 0.271 0.271 0.16 0.271 0.271 0.271 0.271 0.271 0.02 0.4 0.04 0.0 0.18 0.34 0.01 0.96; 0.0 0.1688888888888889 0.24 0.0 0.1688888888888889 0.2 0.02 0.1688888888888889 0.33 0.1688888888888889 0.1688888888888889 0.1688888888888889 0.17 0.1688888888888889 0.06 0.1688888888888889 0.1688888888888889 0.1688888888888889 0.1688888888888889 0.5; 0.26375000000000004 0.26375000000000004 0.84 0.26375000000000004 0.26375000000000004 0.42 0.26375000000000004 0.26375000000000004 0.26375000000000004 0.26375000000000004 0.54 0.26375000000000004 0.26375000000000004 0.0 0.13 0.01 0.04 0.26375000000000004 0.26375000000000004 0.13; 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.27 0.03 0.21142857142857144 0.11 0.21142857142857144 0.5 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.21142857142857144 0.15 0.36 0.06; 0.22833333333333336 0.22833333333333336 0.22833333333333336 0.22833333333333336 0.1 0.22833333333333336 0.22833333333333336 0.01 0.02 0.22833333333333336 0.01 0.22833333333333336 0.22833333333333336 0.22833333333333336 0.22833333333333336 0.64 0.22833333333333336 0.59 0.22833333333333336 0.22833333333333336; 0.08800000000000001 0.08800000000000001 0.08800000000000001 0.04 0.08800000000000001 0.08800000000000001 0.08 0.15 0.17 0.08800000000000001 0.08800000000000001 0.08800000000000001 0.08800000000000001 0.08800000000000001 0.08800000000000001 0.0 0.08800000000000001 0.08800000000000001 0.08800000000000001 0.08800000000000001; 0.52 0.62 0.30250000000000005 0.07 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.0 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005 0.30250000000000005; 0.043333333333333335 0.08 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.0 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.05 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335 0.043333333333333335; 0.34 0.34 0.34 0.34 0.34 0.34 0.34 0.68 0.34 0.0 0.34 0.34 0.34 0.34 0.34 0.34 0.34 0.34 0.34 0.34; 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04 0.04; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]
	logReconstructed = Float64[-0.6666 -0.2688 -0.811 -0.811 -0.2345 -0.737 -0.7131 -0.5353 -0.6897 -0.811 -0.7612 -0.1844 -0.811 0.5059 -0.02915 -0.6666 -0.7131 0.5753 -0.1681 -0.5353; -0.7859 -0.5146 0.07039 0.275 -0.3219 -0.7859 -0.811 -0.415 -0.737 -0.4941 -0.2688 -0.811 -0.5995 -0.2515 -0.5778 -0.811 0.07039 -0.6666 -0.6439 0.1763; -0.811 -0.3401 -0.7612 -0.811 -0.7612 -0.6666 -0.6897 0.2141 0.275 0.4647 0.6323 -0.304 -0.6215 -0.304 -0.02915 -0.811 0.2869 -0.4739 -0.5564 -0.811; -0.7859 -0.7859 -0.1844 -0.3219 -0.7612 -0.811 -0.7859 -0.4739 -0.737 0.275 -0.3585 -0.454 -0.811 -0.7612 -0.5353 0.4957 -0.6666 -0.811 -0.811 -0.3771; -0.737 0.1635 -0.811 -0.6666 -0.7859 -0.7859 -0.454 -0.7859 -0.0145 0.3785 -0.7859 -0.4739 -0.2515 -0.7612 -0.7612 -0.08927 -0.454 -0.3959 -0.7131 -0.811; -0.1047 0.6229 0.1506 0.6323 -0.737 0.1243 -0.5778 -0.6666 -0.4941 -0.811 0.04264 -0.074 -0.2176 0.585 -0.6666 -0.6439 -0.6897 0.02857 -0.811 -0.7859; -0.5353 0.6229 -0.2009 -0.6439 -0.5564 -0.2345 -0.1844 -0.6439 -0.811 -0.454 -0.811 -0.2176 -0.152 -0.7859 -0.7859 -0.7612 -0.4344 -0.811 0.3103 0.02857; -0.811 -0.6215 0.08406 -0.1361 -0.6439 -0.7859 -0.737 -0.5778 -0.6897 -0.454 -0.6897 -0.1047 -0.811 -0.074 -0.02915 -0.811 -0.5995 0.3103 0.2388 0.6508; -0.7859 -0.2009 -0.3959 -0.811 -0.811 -0.811 -0.1681 0.3674 -0.811 -0.7131 0.3448 0.6508 0.1635 -0.5353 -0.737 -0.3959 0.1243 -0.7131 -0.7131 0.4542; -0.5353 -0.811 -0.7131 -0.7612 -0.3959 -0.5995 -0.7859 0.2987 -0.2863 -0.3585 -0.7859 -0.7612 -0.074 0.251 -0.2009 0.6415 -0.074 -0.5778 0.1506 -0.6439; -0.6215 -0.811 -0.454 -0.7859 0.3334 -0.3219 0.4647 -0.2176 -0.5146 -0.04394 -0.7131 -0.4739 -0.4344 0.275 -0.737 -0.1681 0.433 -0.2345 -0.5353 -0.1047; 0.546 -0.7612 -0.811 -0.7612 -0.2688 -0.6666 -0.7859 -0.7859 0.07039 0.2016 -0.2863 -0.2176 0.111 -0.1844 -0.3401 -0.811 -0.2515 -0.7859 -0.7131 -0.6897; 0.1635 -0.7131 0.05658 -0.811 -0.304 -0.6439 0.275 -0.7859 -0.7612 -0.811 -0.0145 -0.811 -0.1047 -0.3401 -0.6666 0.6041 0.2987 -0.2515 -0.5995 -0.6897; 0.04264 -0.3959 -0.5778 -0.7859 -0.5146 -0.4739 -0.6666 0.4957 -0.7612 -0.811 -0.5995 0.251 -0.7859 -0.811 -0.7859 -0.811 -0.7859 -0.152 0.05658 0.2016; -0.7131 -0.2345 -0.2515 0.3334 -0.811 0.433 -0.5353 -0.7859 -0.5146 -0.811 -0.811 -0.5995 -0.5564 0.1375 -0.811 -0.2176 -0.05889 0.3103 -0.0145 -0.2176; -0.7859 -0.5995 -0.811 0.08406 -0.415 -0.811 0.275 0.3103 -0.1681 -0.08927 -0.6215 -0.811 -0.7131 -0.4344 -0.811 -0.6666 -0.7859 -0.811 0.0 -0.3401; -0.2515 -0.7612 -0.6897 0.5361 -0.7612 -0.454 -0.5995 -0.811 0.04264 -0.6897 -0.415 -0.5564 -0.7612 -0.08927 0.5361 0.05658 0.5753 -0.02915 0.6135 -0.811; -0.811 0.6415 0.6323 -0.1844 -0.6897 -0.7612 -0.6666 -0.737 -0.1361 -0.08927 -0.4344 -0.811 -0.152 0.433 0.05658 0.4005 -0.1361 -0.7131 0.3334 -0.811; 0.3334 -0.1361 -0.4739 -0.5353 -0.5564 -0.811 0.5656 -0.1203 -0.6897 -0.811 -0.2688 -0.7859 0.251 0.4751 0.07039 -0.04394 -0.6215 -0.811 -0.1681 -0.811; -0.6215 -0.7859 0.5059 0.4751 -0.811 -0.811 0.6415 -0.811 -0.5353 -0.6897 -0.7131 0.1375 -0.811 0.546 -0.2688 -0.7859 -0.4344 -0.05889 -0.6897 -0.811; -0.7859 -0.7859 0.3674 -0.3344 -0.811 0.2265 -0.7859 -0.6215 -0.415 -0.0145 0.07039 -0.7612 -0.1361 0.2141 -0.7612 0.2265 -0.7612 0.4114 -0.737 -0.4941; -0.4889 -0.5146 0.05658 -0.7859 -0.6215 -0.2688 -0.2863 -0.4889 -0.811 -0.811 -0.7859 0.4751 -0.811 -0.811 -0.737 -0.811 -0.811 -0.2009 -0.6439 0.3785; -0.811 -0.1888 -0.05889 0.6415 -0.737 0.09761 0.5361 -0.5146 0.4542 -0.811 -0.811 -0.811 -0.1888 -0.1888 0.0 0.3448 0.3674 -0.3401 -0.7131 -0.04394; -0.811 0.09761 0.09761 0.6229 -0.7612 -0.6215 -0.1203 -0.3979 -0.7612 -0.2688 -0.7612 -0.3979 -0.5778 -0.811 -0.811 0.5753 -0.811 -0.3979 -0.3979 -0.6439; -0.5995 -0.811 -0.6093 -0.6093 0.1763 -0.811 -0.6093 -0.6093 -0.811 -0.4941 -0.7859 -0.811 -0.7612 -0.6215 -0.5353 -0.811 -0.6093 -0.5995 -0.5778 -0.2863; -0.2232 -0.2232 -0.5146 0.263 -0.2232 -0.737 -0.811 -0.6666 0.1763 0.1635 -0.4739 -0.2232 0.5261 0.5558 0.4436 -0.7131 -0.2232 -0.2232 -0.5995 -0.737; 0.5059 0.4436 -0.2349 -0.2349 -0.1203 -0.2349 -0.2349 -0.3585 -0.737 -0.7859 -0.1047 0.01436 0.1243 -0.7859 -0.2349 0.2987 -0.2349 -0.737 -0.811 -0.2349; 0.516 -0.3675 -0.3675 -0.304 -0.7859 -0.3675 0.4957 -0.3675 -0.3675 -0.4739 -0.3675 -0.3675 -0.3675 -0.5778 -0.5146 -0.2009 -0.737 -0.7131 -0.304 -0.811; -0.2489 0.5753 -0.2489 -0.2489 -0.5995 -0.2489 0.5558 -0.811 -0.2489 -0.2489 -0.7612 -0.2489 0.263 -0.6897 -0.3959 -0.5995 -0.811 0.5361 -0.2489 -0.2489; 0.2265 -0.328 -0.328 -0.328 -0.328 -0.328 -0.454 -0.328 -0.328 -0.328 -0.328 -0.328 -0.7612 -0.04394 -0.7131 -0.811 -0.415 -0.1361 -0.7859 0.6135; -0.811 -0.4688 -0.304 -0.811 -0.4688 -0.3771 -0.7612 -0.4688 -0.152 -0.4688 -0.4688 -0.4688 -0.4344 -0.4688 -0.6666 -0.4688 -0.4688 -0.4688 -0.4688 0.09761; -0.3384 -0.3384 0.4957 -0.3384 -0.3384 -0.0145 -0.3384 -0.3384 -0.3384 -0.3384 0.1506 -0.3384 -0.3384 -0.811 -0.5146 -0.7859 -0.7131 -0.3384 -0.3384 -0.5146; -0.3846 -0.3846 -0.3846 -0.3846 -0.2515 -0.737 -0.3846 -0.5564 -0.3846 0.09761 -0.3846 -0.3846 -0.3846 -0.3846 -0.3846 -0.3846 -0.3846 -0.4739 -0.1047 -0.6666; -0.4036 -0.4036 -0.4036 -0.4036 -0.5778 -0.4036 -0.4036 -0.7859 -0.7612 -0.4036 -0.7859 -0.4036 -0.4036 -0.4036 -0.4036 0.275 -0.4036 0.2141 -0.4036 -0.4036; -0.6108 -0.6108 -0.6108 -0.7131 -0.6108 -0.6108 -0.6215 -0.4739 -0.4344 -0.6108 -0.6108 -0.6108 -0.6108 -0.6108 -0.6108 -0.811 -0.6108 -0.6108 -0.6108 -0.6108; 0.1243 0.251 -0.2699 -0.6439 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699 -0.811 -0.2699 -0.2699 -0.2699 -0.2699 -0.2699; -0.7074 -0.6215 -0.7074 -0.7074 -0.7074 -0.7074 -0.811 -0.7074 -0.7074 -0.7074 -0.7074 -0.7074 -0.7074 -0.6897 -0.7074 -0.7074 -0.7074 -0.7074 -0.7074 -0.7074; -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 0.3219 -0.2445 -0.811 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445 -0.2445; -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131 -0.7131; 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0]

	filepath = joinpath(@__DIR__, "data/data_missing.tsv")

	varIds = [Symbol("V$i") for i=1:40]
	sampleIds = [string('S',lpad(i,2,'0')) for i=1:20]
	groupAnnot = repeat(["A","B"],inner=10)
	timeAnnot = vcat(0.01:0.01:0.1, 0.01:0.01:0.1)

	app = MiniApp()
	init(app)

	# Open file
	setvalue(app, Any["samplefilepath", filepath])
	setvalue(app, Any["lastsampleannot", "Time"])
	setvalue(app, Any["normalizemethod", "None"])
	put!(app.fromGUI, :normalize=>[])
	@test runall(app)
	sampleData = app.jg.scheduler.jobs[app.jg.normalizeID].result
	@test sampleData.data ≈ reconstructed

	setvalue(app, Any["logtransform", "true"])
	setvalue(app, Any["logtransformoffset", "0.57"])
	put!(app.fromGUI, :normalize=>[])
	@test runall(app)
	sampleData = app.jg.scheduler.jobs[app.jg.normalizeID].result
	@test sampleData.data ≈ logReconstructed atol=1e-3
end


end